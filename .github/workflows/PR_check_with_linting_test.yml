name: PR Checks with Linting Tests and Unit Tests

on:
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  lint-tests:
    name: PyLint Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create venv
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install .[test]
        shell: bash

      - name: Analyzing the code with pylint
        run: |
          . .venv/bin/activate
          pylint $(git ls-files '*.py') --max-line-length=120 --disable=E1101,E0611,E0401,E0633,R0801 --max-args=10 --max-locals=30 --max-attribute=10

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create venv
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install .[test]
        shell: bash

      - name: Run unit tests
        run: |
          . .venv/bin/activate
          python -m unittest discover -s ./src/tests ./src
        shell: bash

  all-checks-passed:
    name: All Checks Passed
    if: always()
    needs: [lint-tests, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Ensure all required jobs pass successfully
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  auto-merge:
    name: Auto-Merge Admin PR After All Checks Passed
    if: success() && ${{ contains(fromJson('["bebo1010"]'), github.actor) }}
    needs: all-checks-passed
    runs-on: ubuntu-latest
    steps:
      - name: Create github app token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.AUTO_MERGE_BOT_APP_ID }}
          private-key: ${{ secrets.AUTO_MERGE_BOT_PRIVATE_KEY }}

      - name: Approve and squash the pull request
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          gh pr review --approve "$PR_URL"
          gh pr merge --admin -s "$PR_URL"
